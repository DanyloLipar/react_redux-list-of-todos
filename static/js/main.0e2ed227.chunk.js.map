{"version":3,"sources":["store/types.ts","store/index.ts","api/api.ts","actions.ts","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.tsx","selectors.ts","components/CurrentUser.tsx/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionsType","initialState","todos","selectedId","selectedUser","store","createStore","state","action","type","LoadTodos","payload","SelectId","CurrentUser","composeWithDevTools","BASE_URL","setIdAction","num","TodoCard","todo","dispatch","useDispatch","className","title","onClick","userId","TodoList","map","id","loadTodosSelector","loadIdSelector","selectedUserSelector","userFromServe","useSelector","useState","loading","setLoading","loadingError","setLoadingError","useEffect","fetch","then","response","json","user","obj","catch","name","website","phone","email","App","query","setQuery","todosFromServe","showedTodos","filter","toLowerCase","includes","placeholder","onChange","event","currentTarget","value","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e2ed227.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nexport interface TodosState {\n  todos: Todo[],\n  selectedId: number,\n  selectedUser: User | null,\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionsType {\n  LoadTodos = 'loadTodos',\n  SelectId = 'selectTodo',\n  CurrentUser = 'currentUser',\n}\n\nexport type LoadTodos = Action<ActionsType.LoadTodos, Todo[]>;\nexport type SelectId = Action<ActionsType.SelectId, number>;\nexport type CurrentUser = Action<ActionsType.CurrentUser, User>;\n\nexport type Actions = LoadTodos | SelectId | CurrentUser;\n","import { createStore, Reducer } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { TodosState, Actions, ActionsType } from './types';\n\nconst initialState: TodosState = {\n  todos: [],\n  selectedId: 0,\n  selectedUser: null,\n};\n\nexport const todosReducer: Reducer<TodosState, Actions> = (\n  state = initialState,\n  action: Actions,\n) => {\n  switch (action.type) {\n    case ActionsType.LoadTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case ActionsType.SelectId:\n      return {\n        ...state,\n        selectedId: action.payload,\n      };\n    case ActionsType.CurrentUser:\n      return {\n        ...state,\n        selectedUser: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(todosReducer, composeWithDevTools());\n\nexport default store;\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = (id: number): Promise<User> => {\n  return fetch(`${BASE_URL}/users/${id}`)\n    .then(response => response.json());\n};\n","import {\n  LoadTodos, SelectId, CurrentUser,\n  ActionsType,\n} from './store/types';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nexport const setTodosActions = (payload: Todo[]): LoadTodos => ({\n  type: ActionsType.LoadTodos,\n  payload,\n});\n\nexport const setIdAction = (num: number): SelectId => ({\n  type: ActionsType.SelectId,\n  payload: num,\n});\n\nexport const setUserFromServe = (obj: User): CurrentUser => ({\n  type: ActionsType.CurrentUser,\n  payload: obj,\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { setIdAction } from '../../actions';\nimport './TodoCard.scss';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"card\">\n      <p className=\"card__title\">{todo.title}</p>\n      <button\n        className=\"card__btn\"\n        type=\"button\"\n        onClick={() => dispatch(setIdAction(todo.userId))}\n      >\n        {`Select user ${todo.userId}`}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoCard } from '../TodoCard/TodoCard';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <ul className=\"list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className=\"list__todo\"\n          >\n            <TodoCard todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { TodosState } from './store/types';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nexport const loadTodosSelector = (state: TodosState): Todo[] => state.todos;\n\nexport const loadIdSelector = (\n  state: TodosState,\n): number => state.selectedId;\n\nexport const selectedUserSelector = (\n  state: TodosState,\n): User | null => state.selectedUser;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api/api';\nimport { loadIdSelector, selectedUserSelector } from '../../selectors';\nimport { setUserFromServe, setIdAction } from '../../actions';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const userFromServe = useSelector(selectedUserSelector);\n  const [loading, setLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n  const userId = useSelector(loadIdSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(userId)\n      .then((user) => {\n        dispatch(setUserFromServe(user));\n      })\n      .then(() => setLoading(false))\n      .catch(() => setLoadingError(true));\n  }, [userId]);\n\n  return (\n    <>\n      {loading && (\n        <p className=\"loading\">In process...</p>\n      )}\n\n      {(loadingError && loading) && (\n        <p className=\"loading\">Failed loading data</p>\n      )}\n\n      {(loading && !loadingError) && (\n        <div className=\"current\">\n          <div className=\"current__title\">\n            <button\n              type=\"button\"\n              className=\"current__title-btn\"\n              onClick={() => dispatch(setIdAction(100))}\n            >\n              Clear\n            </button>\n            <h2>Selected User:</h2>\n          </div>\n          <div className=\"current__user user\">\n            <h3 className=\"user__id\">{`User: ${userFromServe?.id}`}</h3>\n            <h2>{userFromServe?.name}</h2>\n            <p>{userFromServe?.website}</p>\n            <p className=\"user__contacts\">\n              {`Phone number: ${userFromServe?.phone}`}\n              <span className=\"user__contacts-block\">{`Email: ${userFromServe?.email}`}</span>\n            </p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { loadTodosSelector } from './selectors';\nimport { setTodosActions } from './actions';\nimport { CurrentUser } from './components/CurrentUser.tsx/CurrentUser';\nimport './App.scss';\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n  const todos = useSelector(loadTodosSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServe => dispatch(setTodosActions(todosFromServe)))\n      .then(() => setLoading(true))\n      .catch(() => setLoadingError(true));\n  }, []);\n\n  const showedTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n  return (\n    <>\n      {!loading && (\n        <p>In process...</p>\n      )}\n\n      {(loadingError && loading) && (\n        <p>Failed loading data</p>\n      )}\n\n      {(loading && !loadingError) && (\n        <div className=\"app\">\n          <div className=\"app__list\">\n            <input\n              className=\"search\"\n              placeholder=\"Search todo\"\n              onChange={event => setQuery(event.currentTarget.value)}\n            />\n            <TodoList todos={showedTodos} />\n          </div>\n          <CurrentUser />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}